/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//works ont the concept of segment trees
//                      0
//                     / \
//               (2*0+1)(2*0+2)
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root){return 0;}
        int maxi=INT_MIN;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            int f,l;
            int size=q.size();
            int min=q.front().second;
            for(int i=0;i<size;i++)
            {TreeNode* cur=q.front().first;
             int curt=q.front().second-min;
              q.pop();
                if(i==0){f=curt;}
                if(i==size-1){l=curt;}
                if(cur->left){q.push({cur->left,2*curt+1});}
                if(cur->right){q.push({cur->right,2*curt+2});}
                
            }
            maxi=max(maxi,l-f+1);
        }
        return maxi;
    }
};