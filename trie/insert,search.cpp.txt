/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct Node{
         Node *arr[26];
        bool f=false; 
       bool contain(char s)
       {
           return (arr[s-'a']!=NULL);
       }
      void put(char c,Node *node)
      {
          arr[ch-'a']=node;
      }
    Node * get(char ch)
    {
        return arr[ch-'a'];
    }
    void endword()
    {
        f=true;
    }
    bool isend() {
        return f; 
    }
    
    }
class Trie {
Node *root;
public:
    

    /** Initialize your data structure here. */
    Trie() {
    root= new Node();

    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node *l=root;
        for(int i=0;i<word.length();i++)
        {
            if(!l->contain(word[i]))
            {
                l->put(word[i],new Node());
            }
            l=l->get(word[i]);
        }
        l->endword();

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
         Node *l=root;
        for(int i=0;i<word.length();i++)
        {
            if(!l->contain(word[i]))
            {
                return false;
            }
            l=l->get(word[i]);
        }
        if(l->isend()) {
            return true; 
        }
        return false; 

    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
         Node *l=root;
        for(int i=0;i<prefix.length();i++)
        {
            if(!l->contain(prefix[i]))
            {
                return false;
            }
            l=l->get(prefix[i]);
        }
        return true;
    }
};