struct node{
        node*arr[26];
        int ew=0;
        int c=0;
        bool find(char s)
        {
           return (arr[s-'a']!=NULL);
        }
        void put(char ch,node* n){
        arr[ch-'a']=n;
        }
        node*get(char ch ){
            return arr[ch-'a'];
        }
        void endwith(){
            ew=ew+1;
        }
        void count(){
            c=c+1;
        }
        int getend() {
        return ew; 
    }
    int getcount() {
        return c; 
    }
        void deletecount(){c--;}
        void deleteend(){ew--;}
    };
class Trie{
    node* root;
public:
    Trie(){
        // Write your code here.
        root=new node();
    }

    void insert(string &word){
        // Write your code here.
        node*l=root;
        for(int i=0;i<word.length();i++)
        {
           if(!l->find(word[i]))
           {
               l->put(word[i],new node());
           }
            l=l->get(word[i]);
            l->count();
        }
        l->endwith();
    }

    int countWordsEqualTo(string &word){
        // Write your code here
        node*l=root;
        for(int i=0;i<word.length();i++)
        {
            if(l->find(word[i]))
            {
                l=l->get(word[i]);
            }
            else{
                return 0;
            }
        }
        return l->getend();
        
    }

    int countWordsStartingWith(string &word){
        // Write your code here.
         node*l=root;
        for(int i=0;i<word.length();i++)
        {
            if(l->find(word[i]))
            {
                l=l->get(word[i]);
            }
            else{
                return 0;
            }
        }
        return l->getcount();
        
    }

    void erase(string &word){
        // Write your code here.
         node*l=root;
        for(int i=0;i<word.length();i++)
        {
            if(l->find(word[i]))
            {
                l=l->get(word[i]);
                l->deletecount();
            }
            else{
                return;
            }
        }
        return l->deleteend();
        
    }
};
